{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SAGAC,EAAAF,GAASG,OAAOC,KAAK,IACrBF,EAAAF,GAASG,OAAOE,MAAM,CACpBC,MAAO,QACPC,QAAS,MAIX,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAASF,SAASG,iBAAiB,SAyCzC,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAWtC,OATgB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,IACLN,EACKI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,KAE3BA,MAhDmBP,EAArBe,MAAMC,QAAU,OACrBhB,EAAKe,MAAME,WAAa,WACxBjB,EAAKe,MAAMG,SAAW,OACtBlB,EAAKe,MAAMI,IAAM,OACjBhB,EAAOiB,SAAQC,IACbA,EAAGN,MAAMC,QAAU,WAIrBhB,EAAKsB,iBAAiB,UAGtB,SAAsBC,GACpBA,EAAMC,iBACmB,MACvBC,UAAYlB,MAAAmB,EAAKC,KAAEA,EAAIC,OAAEA,IACvBL,EAAMM,cAEoBC,WAAjBC,OAAOL,EAAMM,OACEC,UAAhBF,OAAOJ,EAAKK,OACUE,YAApBH,OAAOH,EAAOI,OAC5BtC,EAAAF,GAASG,OAAOwC,KAAK,UAAUL,qBAAqBG,sBAAsBC,eAG3D,IAAV,IAAIE,EAAW,EAAGA,GAAYF,YAAaE,GAAY,EAC1D/B,EAAc+B,EAAUN,YACwBO,MAAtC,EAAC/B,SAAEA,EAAQC,MAAEA,MACjBb,EAAAF,GAASG,OAAO2C,QAAQ,uBAAqBhC,QAAiBC,UAE/DgC,OAAM,EAACjC,SAAEA,EAAQC,MAAEA,MAClBb,EAAAF,GAASG,OAAO6C,QAAQ,sBAAoBlC,QAAiBC,UAGnEuB,YAAcG","sources":["src/js/03-promises.js"],"sourcesContent":["// імпорт бібліотеки Notiflix\nimport Notiflix from 'notiflix';\nimport \"notiflix/dist/notiflix-3.2.5.min.css\";\n\nNotiflix.Notify.init({});   //  глобальна установка параметрів користувача\nNotiflix.Notify.merge({     //  локальне налаштування параметрів \n  width: '310px',\n  timeout: 10000,\n});\n\n\nconst form = document.querySelector('.form');\nconst inputs = document.querySelectorAll('input');\n\n// налаштування стилів для форми\nform.style.display = 'flex';\nform.style.alignItems = 'flex-end';\nform.style.fontSize = '13px';\nform.style.gap = '10px';\ninputs.forEach(el => {\n  el.style.display = 'block';\n});\n\n\nform.addEventListener(\"submit\", handleSubmit);\n\n\nfunction handleSubmit(event) {\n  event.preventDefault();   // скасування дії submit за умовчанням\n  const {\n    elements: { delay, step, amount } // властивість elements форми містить об'єкт із посиланнями\n  } = event.currentTarget;            // на всі її елементи які мають атрибут name\n\n  delayValue = Number(delay.value);   // перетворюю дані інпутів на числа, \n  stepValue = Number(step.value);     // щоб у подальшому уникнути конкатенації\n  amountValue = Number(amount.value); // строк замість додавання \n  Notiflix.Notify.info(`delay: ${delayValue}, step: ${stepValue}, amount: ${amountValue}`); // повідомлення про введені дані\n    // event.currentTarget.reset();   // очищення інпутів\n  \n  for (let position = 1; position <= amountValue; position += 1) {\n    createPromise(position, delayValue)       // функція createPromise повертає проміс, до якого додаємо виклик .then та .catch\n        .then(({ position, delay }) => {      // .then отримує функцію resolve з необхідними даними\n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {      // .catch отримує функцію reject з необхідними даними\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    \n    delayValue += stepValue;    // збільшуємо затримку на розмір крока\n  }\n}\n\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;    // елемент випадковості\n  \n  const promise = new Promise((resolve, reject) => {  // аргументом промісу є функція,параметрами якого є дві функції resolve та reject\n    setTimeout(() => {\n      if (shouldResolve) {\n        return resolve({ position, delay }) // у випадку Fulfill повертаємо функцію resolve з деструктурізованим об'єктом даних у параметрі\n      } else {\n        return reject({ position, delay })  // у випадку Reject повертаємо функцію reject з деструктурізованим об'єктом даних у параметрі\n      }\n    }, delay);\n  })\n  return promise;   // функція createPromise повертає проміс, до якого можна додати виклик .then\n}\n"],"names":["$eWCmQ","parcelRequire","$parcel$interopDefault","Notify","init","merge","width","timeout","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$inputs","querySelectorAll","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","style","display","alignItems","fontSize","gap","forEach","el","addEventListener","event","preventDefault","elements","delay1","step","amount","currentTarget","delayValue","Number","value","stepValue","amountValue","info","position1","then","success","catch","failure"],"version":3,"file":"03-promises.4fdcb4e9.js.map"}